name: Release

on:
  push:

jobs:
  create-tag:
    name: Create Tag
    outputs:
      tag_name: ${{ steps.generate-tag-name.outputs.tag_name }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Generate Tag Name
        id: generate-tag-name
        shell: bash
        run: |
          echo "::set-output name=tag_name::$(date +%H-%M-%S_%d-%m-%Y)-${{ github.sha }}"
      - name: Create Tag
        run: |
          git tag "${{ steps.generate-tag-name.outputs.tag_name }}"
          git push --tags

  create-release:
    needs: ["create-tag"]
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create-release.outputs.upload_url }}
      id: ${{ steps.create-release.outputs.id }}
    steps:
      - name: Create Release
        id: create-release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ needs.create-tag.outputs.tag_name }}
          release_name: ${{ needs.create-tag.outputs.tag_name }}
          draft: true
          prerelease: false

  build:
    needs: ["create-release"]
    name: Build
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        output:
          - yaml
          - json
    steps:
      - uses: actions/checkout@v3
      - name: Set Download Links
        run: |
          echo "FSYAML_DOWNLOAD=https://github.com/Timothy-Gonzalez/fsyaml/releases/download/v1.0.4/fsyaml-v1.0.4-64-bit-linux-x86_64-unknown-linux-gnu.zip" >> $GITHUB_ENV
          echo "YAML2JSON_DOWNLOAD=https://github.com/Nessex/yaml2json-rs/releases/download/v0.3.2/yaml2json-rs-v0.3.2-aarch64-unknown-linux-gnu.tar.gz" >> $GITHUB_ENV
      - name: Check Cache for fsyaml
        id: fsyaml-cache
        uses: actions/cache@v3
        with:
          path: binaries/fsyaml
          key: ${{ env.FSYAML_DOWNLOAD }}
      - name: Check Cache for yaml2json
        id: yaml2json-cache
        uses: actions/cache@v3
        with:
          path: binaries/yaml2json
          key: ${{ env.FSYAML_DOWNLOAD }}
      - name: Install fsyaml
        if: steps.fsyaml-cache.outputs.cache-hit != 'true'
        run: |
          mkdir -p binaries
          wget ${{ env.FSYAML_DOWNLOAD }} -O fsyaml.zip
          unzip fsyaml.zip -d binaries
      - name: Install yaml2json
        if: steps.yaml2json-cache.outputs.cache-hit != 'true'
        run: |
          mkdir -p binaries
          wget ${{ env.YAML2JSON_DOWNLOAD }} -O yaml2json.tar.gz
          tar -xf yaml2json.tar.gz -C binaries
      - name: Build ${{ matrix.output }}
        run: |
          mkdir -p output

          binaries/fsyaml src > output/whoami.yaml
          if [ "${{ matrix.output }}" = "json" ]; then
            binaries/yaml2json < output/whoami.yaml > output/whoami.json
          fi
      - name: Upload to Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: output/whoami.${{ matrix.output }}
          asset_name: whoami.${{ matrix.output }}
          asset_content_type: application/octet-stream
      - name: Upload Archive as Artifact
        uses: actions/upload-artifact@v3
        with:
          path: output/whoami.${{ matrix.output }}
          name: whoami.${{ matrix.output }}

  publish:
    needs: ["create-release", "build"]
    name: Publish Release
    runs-on: ubuntu-latest
    steps:
      - name: Publish Release
        uses: actions/github-script@v6
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            github.rest.repos.updateRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: ${{ needs.create-release.outputs.id }},
              draft: false
            });
